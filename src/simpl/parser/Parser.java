
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jun 04 15:12:09 CST 2022
//----------------------------------------------------

package simpl.parser;

import java.io.InputStream;
import simpl.parser.ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jun 04 15:12:09 CST 2022
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\004\000\002\002\006\000\002\002\006\000" +
    "\002\002\007\000\002\002\004\000\002\002\004\000\002" +
    "\002\004\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\004\000\002\002\011\000\002\002\010" +
    "\000\002\002\006\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\123\000\046\004\015\005\012\006\006\007\017\010" +
    "\024\013\013\016\007\020\022\021\004\022\011\023\023" +
    "\024\010\034\005\044\026\047\021\052\014\055\020\056" +
    "\016\001\002\000\126\002\uffdf\004\uffdf\005\uffdf\006\uffdf" +
    "\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015" +
    "\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032" +
    "\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf" +
    "\041\uffdf\042\uffdf\043\uffdf\044\uffdf\046\uffdf\047\uffdf\050" +
    "\uffdf\051\uffdf\052\uffdf\053\uffdf\055\uffdf\056\uffdf\001\002" +
    "\000\046\004\015\005\012\006\006\007\017\010\024\013" +
    "\013\016\007\020\022\021\004\022\011\023\023\024\010" +
    "\034\005\044\026\047\021\052\014\055\020\056\016\001" +
    "\002\000\004\056\122\001\002\000\046\004\015\005\012" +
    "\006\006\007\017\010\024\013\013\016\007\020\022\021" +
    "\004\022\011\023\023\024\010\034\005\044\026\047\021" +
    "\052\014\055\020\056\016\001\002\000\046\004\015\005" +
    "\012\006\006\007\017\010\024\013\013\016\007\020\022" +
    "\021\004\022\011\023\023\024\010\034\005\044\026\047" +
    "\021\052\014\055\020\056\016\001\002\000\126\002\ufffe" +
    "\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012" +
    "\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe" +
    "\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027" +
    "\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe" +
    "\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044" +
    "\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe" +
    "\055\ufffe\056\ufffe\001\002\000\046\004\015\005\012\006" +
    "\006\007\017\010\024\013\013\016\007\020\022\021\004" +
    "\022\011\023\023\024\010\034\005\044\026\047\021\052" +
    "\014\055\020\056\016\001\002\000\046\004\015\005\012" +
    "\006\006\007\017\010\024\013\013\016\007\020\022\021" +
    "\004\022\011\023\023\024\010\034\005\044\026\047\021" +
    "\052\014\055\020\056\016\001\002\000\046\004\015\005" +
    "\012\006\006\007\017\010\024\013\013\016\007\020\022" +
    "\021\004\022\011\023\023\024\010\034\005\044\026\047" +
    "\021\052\014\055\020\056\016\001\002\000\126\002\ufffc" +
    "\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012" +
    "\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc" +
    "\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027" +
    "\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc" +
    "\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044" +
    "\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc" +
    "\055\ufffc\056\ufffc\001\002\000\126\002\uffff\004\uffff\005" +
    "\uffff\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff\013\uffff" +
    "\014\uffff\015\uffff\016\uffff\017\uffff\020\uffff\021\uffff\022" +
    "\uffff\023\uffff\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff" +
    "\031\uffff\032\uffff\033\uffff\034\uffff\035\uffff\036\uffff\037" +
    "\uffff\040\uffff\041\uffff\042\uffff\043\uffff\044\uffff\046\uffff" +
    "\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff\055\uffff\056" +
    "\uffff\001\002\000\004\056\100\001\002\000\126\002\000" +
    "\004\000\005\000\006\000\007\000\010\000\011\000\012" +
    "\000\013\000\014\000\015\000\016\000\017\000\020\000" +
    "\021\000\022\000\023\000\024\000\025\000\026\000\027" +
    "\000\030\000\031\000\032\000\033\000\034\000\035\000" +
    "\036\000\037\000\040\000\041\000\042\000\043\000\044" +
    "\000\046\000\047\000\050\000\051\000\052\000\053\000" +
    "\055\000\056\000\001\002\000\046\004\015\005\012\006" +
    "\006\007\017\010\024\013\013\016\007\020\022\021\004" +
    "\022\011\023\023\024\010\034\005\044\026\047\021\052" +
    "\014\055\020\056\016\001\002\000\126\002\uffe0\004\uffe0" +
    "\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0" +
    "\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0" +
    "\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\046" +
    "\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\055\uffe0" +
    "\056\uffe0\001\002\000\126\002\ufffd\004\ufffd\005\ufffd\006" +
    "\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd" +
    "\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023" +
    "\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd" +
    "\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040" +
    "\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\046\ufffd\047\ufffd" +
    "\050\ufffd\051\ufffd\052\ufffd\053\ufffd\055\ufffd\056\ufffd\001" +
    "\002\000\004\056\071\001\002\000\110\002\037\004\015" +
    "\005\012\006\006\007\017\010\024\013\013\016\007\020" +
    "\022\021\004\022\011\023\023\024\010\025\044\026\030" +
    "\027\041\030\050\031\040\032\034\033\042\034\005\035" +
    "\043\036\045\037\033\040\036\041\047\042\031\043\027" +
    "\044\026\046\035\047\021\051\032\052\014\055\020\056" +
    "\016\001\002\000\126\002\uffde\004\uffde\005\uffde\006\uffde" +
    "\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015" +
    "\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde" +
    "\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032" +
    "\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde" +
    "\041\uffde\042\uffde\043\uffde\044\uffde\046\uffde\047\uffde\050" +
    "\uffde\051\uffde\052\uffde\053\uffde\055\uffde\056\uffde\001\002" +
    "\000\046\004\015\005\012\006\006\007\017\010\024\013" +
    "\013\016\007\020\022\021\004\022\011\023\023\024\010" +
    "\034\005\044\026\047\021\052\014\055\020\056\016\001" +
    "\002\000\046\004\015\005\012\006\006\007\017\010\024" +
    "\013\013\016\007\020\022\021\004\022\011\023\023\024" +
    "\010\034\005\044\026\047\021\052\014\055\020\056\016" +
    "\001\002\000\046\004\015\005\012\006\006\007\017\010" +
    "\024\013\013\016\007\020\022\021\004\022\011\023\023" +
    "\024\010\034\005\044\026\047\021\052\014\055\020\056" +
    "\016\001\002\000\046\004\015\005\012\006\006\007\017" +
    "\010\024\013\013\016\007\020\022\021\004\022\011\023" +
    "\023\024\010\034\005\044\026\047\021\052\014\055\020" +
    "\056\016\001\002\000\046\004\015\005\012\006\006\007" +
    "\017\010\024\013\013\016\007\020\022\021\004\022\011" +
    "\023\023\024\010\034\005\044\026\047\021\052\014\055" +
    "\020\056\016\001\002\000\046\004\015\005\012\006\006" +
    "\007\017\010\024\013\013\016\007\020\022\021\004\022" +
    "\011\023\023\024\010\034\005\044\026\047\021\052\014" +
    "\055\020\056\016\001\002\000\046\004\015\005\012\006" +
    "\006\007\017\010\024\013\013\016\007\020\022\021\004" +
    "\022\011\023\023\024\010\034\005\044\026\047\021\052" +
    "\014\055\020\056\016\001\002\000\046\004\015\005\012" +
    "\006\006\007\017\010\024\013\013\016\007\020\022\021" +
    "\004\022\011\023\023\024\010\034\005\044\026\047\021" +
    "\052\014\055\020\056\016\001\002\000\004\002\001\001" +
    "\002\000\046\004\015\005\012\006\006\007\017\010\024" +
    "\013\013\016\007\020\022\021\004\022\011\023\023\024" +
    "\010\034\005\044\026\047\021\052\014\055\020\056\016" +
    "\001\002\000\046\004\015\005\012\006\006\007\017\010" +
    "\024\013\013\016\007\020\022\021\004\022\011\023\023" +
    "\024\010\034\005\044\026\047\021\052\014\055\020\056" +
    "\016\001\002\000\046\004\015\005\012\006\006\007\017" +
    "\010\024\013\013\016\007\020\022\021\004\022\011\023" +
    "\023\024\010\034\005\044\026\047\021\052\014\055\020" +
    "\056\016\001\002\000\046\004\015\005\012\006\006\007" +
    "\017\010\024\013\013\016\007\020\022\021\004\022\011" +
    "\023\023\024\010\034\005\044\026\047\021\052\014\055" +
    "\020\056\016\001\002\000\046\004\015\005\012\006\006" +
    "\007\017\010\024\013\013\016\007\020\022\021\004\022" +
    "\011\023\023\024\010\034\005\044\026\047\021\052\014" +
    "\055\020\056\016\001\002\000\046\004\015\005\012\006" +
    "\006\007\017\010\024\013\013\016\007\020\022\021\004" +
    "\022\011\023\023\024\010\034\005\044\026\047\021\052" +
    "\014\055\020\056\016\001\002\000\126\002\uffe4\004\uffe4" +
    "\005\012\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013" +
    "\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4" +
    "\022\uffe4\023\uffe4\024\010\025\uffe4\026\uffe4\027\uffe4\030" +
    "\uffe4\031\uffe4\032\uffe4\033\uffe4\034\005\035\uffe4\036\uffe4" +
    "\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\046" +
    "\uffe4\047\021\050\uffe4\051\uffe4\052\uffe4\053\uffe4\055\uffe4" +
    "\056\uffe4\001\002\000\046\004\015\005\012\006\006\007" +
    "\017\010\024\013\013\016\007\020\022\021\004\022\011" +
    "\023\023\024\010\034\005\044\026\047\021\052\014\055" +
    "\020\056\016\001\002\000\046\004\015\005\012\006\006" +
    "\007\017\010\024\013\013\016\007\020\022\021\004\022" +
    "\011\023\023\024\010\034\005\044\026\047\021\052\014" +
    "\055\020\056\016\001\002\000\126\002\ufff3\004\ufff3\005" +
    "\012\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3" +
    "\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022" +
    "\ufff3\023\ufff3\024\010\025\ufff3\026\ufff3\027\ufff3\030\ufff3" +
    "\031\040\032\034\033\042\034\005\035\ufff3\036\ufff3\037" +
    "\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\046\ufff3" +
    "\047\021\050\ufff3\051\ufff3\052\014\053\ufff3\055\ufff3\056" +
    "\ufff3\001\002\000\112\002\uffeb\004\uffeb\005\012\006\uffeb" +
    "\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015" +
    "\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb" +
    "\024\010\025\uffeb\026\uffeb\027\041\030\050\031\040\032" +
    "\034\033\042\034\005\043\027\044\uffeb\046\uffeb\047\021" +
    "\050\uffeb\051\uffeb\052\014\053\uffeb\055\uffeb\056\uffeb\001" +
    "\002\000\112\002\uffee\004\uffee\005\012\006\uffee\007\uffee" +
    "\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016" +
    "\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\010" +
    "\025\uffee\026\uffee\027\041\030\050\031\040\032\034\033" +
    "\042\034\005\043\027\044\uffee\046\uffee\047\021\050\uffee" +
    "\051\uffee\052\014\053\uffee\055\uffee\056\uffee\001\002\000" +
    "\126\002\uffe9\004\uffe9\005\012\006\uffe9\007\uffe9\010\uffe9" +
    "\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\010\025\044" +
    "\026\uffe9\027\041\030\050\031\040\032\034\033\042\034" +
    "\005\035\043\036\045\037\033\040\036\041\047\042\031" +
    "\043\027\044\uffe9\046\uffe9\047\021\050\uffe9\051\uffe9\052" +
    "\014\053\uffe9\055\uffe9\056\uffe9\001\002\000\112\002\uffef" +
    "\004\uffef\005\012\006\uffef\007\uffef\010\uffef\011\uffef\012" +
    "\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef" +
    "\021\uffef\022\uffef\023\uffef\024\010\025\uffef\026\uffef\027" +
    "\041\030\050\031\040\032\034\033\042\034\005\043\027" +
    "\044\uffef\046\uffef\047\021\050\uffef\051\uffef\052\014\053" +
    "\uffef\055\uffef\056\uffef\001\002\000\126\002\ufff0\004\ufff0" +
    "\005\012\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013" +
    "\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0" +
    "\022\ufff0\023\ufff0\024\010\025\ufff0\026\ufff0\027\ufff0\030" +
    "\ufff0\031\ufff0\032\ufff0\033\ufff0\034\005\035\ufff0\036\ufff0" +
    "\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\046" +
    "\ufff0\047\021\050\ufff0\051\ufff0\052\014\053\ufff0\055\ufff0" +
    "\056\ufff0\001\002\000\126\002\ufff4\004\ufff4\005\012\006" +
    "\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4" +
    "\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023" +
    "\ufff4\024\010\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\040" +
    "\032\034\033\042\034\005\035\ufff4\036\ufff4\037\ufff4\040" +
    "\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\046\ufff4\047\021" +
    "\050\ufff4\051\ufff4\052\014\053\ufff4\055\ufff4\056\ufff4\001" +
    "\002\000\126\002\ufff2\004\ufff2\005\012\006\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\010" +
    "\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033" +
    "\ufff2\034\005\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2" +
    "\042\ufff2\043\ufff2\044\ufff2\046\ufff2\047\021\050\ufff2\051" +
    "\ufff2\052\014\053\ufff2\055\ufff2\056\ufff2\001\002\000\112" +
    "\002\uffec\004\uffec\005\012\006\uffec\007\uffec\010\uffec\011" +
    "\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec" +
    "\020\uffec\021\uffec\022\uffec\023\uffec\024\010\025\uffec\026" +
    "\uffec\027\041\030\050\031\040\032\034\033\042\034\005" +
    "\043\027\044\uffec\046\uffec\047\021\050\uffec\051\uffec\052" +
    "\014\053\uffec\055\uffec\056\uffec\001\002\000\124\002\uffe6" +
    "\004\uffe6\005\012\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012" +
    "\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6" +
    "\021\uffe6\022\uffe6\023\uffe6\024\010\025\044\026\030\027" +
    "\041\030\050\031\040\032\034\033\042\034\005\035\043" +
    "\036\045\037\033\040\036\041\047\042\031\043\027\044" +
    "\uffe6\047\021\050\uffe6\051\uffe6\052\014\053\uffe6\055\uffe6" +
    "\056\uffe6\001\002\000\126\002\ufff1\004\ufff1\005\012\006" +
    "\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1" +
    "\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023" +
    "\ufff1\024\010\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1" +
    "\032\ufff1\033\ufff1\034\005\035\ufff1\036\ufff1\037\ufff1\040" +
    "\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\046\ufff1\047\021" +
    "\050\ufff1\051\ufff1\052\014\053\ufff1\055\ufff1\056\ufff1\001" +
    "\002\000\112\002\uffed\004\uffed\005\012\006\uffed\007\uffed" +
    "\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016" +
    "\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\010" +
    "\025\uffed\026\uffed\027\041\030\050\031\040\032\034\033" +
    "\042\034\005\043\027\044\uffed\046\uffed\047\021\050\uffed" +
    "\051\uffed\052\014\053\uffed\055\uffed\056\uffed\001\002\000" +
    "\126\002\uffe5\004\uffe5\005\012\006\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\010\025\044" +
    "\026\030\027\041\030\050\031\040\032\034\033\042\034" +
    "\005\035\043\036\045\037\033\040\036\041\047\042\031" +
    "\043\027\044\uffe5\046\035\047\021\050\uffe5\051\uffe5\052" +
    "\014\053\uffe5\055\uffe5\056\uffe5\001\002\000\112\002\uffea" +
    "\004\uffea\005\012\006\uffea\007\uffea\010\uffea\011\uffea\012" +
    "\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\024\010\025\uffea\026\uffea\027" +
    "\041\030\050\031\040\032\034\033\042\034\005\043\027" +
    "\044\uffea\046\uffea\047\021\050\uffea\051\uffea\052\014\053" +
    "\uffea\055\uffea\056\uffea\001\002\000\126\002\uffe8\004\uffe8" +
    "\005\012\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8" +
    "\022\uffe8\023\uffe8\024\010\025\044\026\030\027\041\030" +
    "\050\031\040\032\034\033\042\034\005\035\043\036\045" +
    "\037\033\040\036\041\047\042\031\043\027\044\uffe8\046" +
    "\uffe8\047\021\050\uffe8\051\uffe8\052\014\053\uffe8\055\uffe8" +
    "\056\uffe8\001\002\000\126\002\uffe7\004\uffe7\005\012\006" +
    "\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023" +
    "\uffe7\024\010\025\uffe7\026\uffe7\027\041\030\050\031\040" +
    "\032\034\033\042\034\005\035\uffe7\036\uffe7\037\uffe7\040" +
    "\uffe7\041\uffe7\042\uffe7\043\027\044\uffe7\046\uffe7\047\021" +
    "\050\uffe7\051\uffe7\052\014\053\uffe7\055\uffe7\056\uffe7\001" +
    "\002\000\004\035\072\001\002\000\046\004\015\005\012" +
    "\006\006\007\017\010\024\013\013\016\007\020\022\021" +
    "\004\022\011\023\023\024\010\034\005\044\026\047\021" +
    "\052\014\055\020\056\016\001\002\000\110\004\015\005" +
    "\012\006\006\007\017\010\024\011\074\013\013\016\007" +
    "\020\022\021\004\022\011\023\023\024\010\025\044\026" +
    "\030\027\041\030\050\031\040\032\034\033\042\034\005" +
    "\035\043\036\045\037\033\040\036\041\047\042\031\043" +
    "\027\044\026\046\035\047\021\051\032\052\014\055\020" +
    "\056\016\001\002\000\046\004\015\005\012\006\006\007" +
    "\017\010\024\013\013\016\007\020\022\021\004\022\011" +
    "\023\023\024\010\034\005\044\026\047\021\052\014\055" +
    "\020\056\016\001\002\000\110\004\015\005\012\006\006" +
    "\007\017\010\024\012\076\013\013\016\007\020\022\021" +
    "\004\022\011\023\023\024\010\025\044\026\030\027\041" +
    "\030\050\031\040\032\034\033\042\034\005\035\043\036" +
    "\045\037\033\040\036\041\047\042\031\043\027\044\026" +
    "\046\035\047\021\051\032\052\014\055\020\056\016\001" +
    "\002\000\126\002\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3" +
    "\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3" +
    "\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033" +
    "\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3" +
    "\042\uffe3\043\uffe3\044\uffe3\046\uffe3\047\uffe3\050\uffe3\051" +
    "\uffe3\052\uffe3\053\uffe3\055\uffe3\056\uffe3\001\002\000\126" +
    "\002\ufff5\004\ufff5\005\012\006\ufff5\007\ufff5\010\ufff5\011" +
    "\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5" +
    "\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\010\025\ufff5\026" +
    "\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034\005" +
    "\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043" +
    "\ufff5\044\ufff5\046\ufff5\047\021\050\ufff5\051\ufff5\052\ufff5" +
    "\053\ufff5\055\ufff5\056\ufff5\001\002\000\004\045\101\001" +
    "\002\000\046\004\015\005\012\006\006\007\017\010\024" +
    "\013\013\016\007\020\022\021\004\022\011\023\023\024" +
    "\010\034\005\044\026\047\021\052\014\055\020\056\016" +
    "\001\002\000\126\002\ufff9\004\015\005\012\006\006\007" +
    "\017\010\ufff9\011\ufff9\012\ufff9\013\013\014\ufff9\015\ufff9" +
    "\016\007\017\ufff9\020\022\021\004\022\011\023\023\024" +
    "\010\025\044\026\030\027\041\030\050\031\040\032\034" +
    "\033\042\034\005\035\043\036\045\037\033\040\036\041" +
    "\047\042\031\043\027\044\026\046\035\047\021\050\ufff9" +
    "\051\032\052\014\053\ufff9\055\020\056\016\001\002\000" +
    "\112\004\015\005\012\006\006\007\017\010\024\013\013" +
    "\016\007\020\022\021\004\022\011\023\023\024\010\025" +
    "\044\026\030\027\041\030\050\031\040\032\034\033\042" +
    "\034\005\035\043\036\045\037\033\040\036\041\047\042" +
    "\031\043\027\044\026\046\035\047\021\050\105\051\032" +
    "\052\014\053\104\055\020\056\016\001\002\000\126\002" +
    "\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd" +
    "\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035" +
    "\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd" +
    "\044\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053" +
    "\uffdd\055\uffdd\056\uffdd\001\002\000\046\004\015\005\012" +
    "\006\006\007\017\010\024\013\013\016\007\020\022\021" +
    "\004\022\011\023\023\024\010\034\005\044\026\047\021" +
    "\052\014\055\020\056\016\001\002\000\110\004\015\005" +
    "\012\006\006\007\017\010\024\013\013\016\007\020\022" +
    "\021\004\022\011\023\023\024\010\025\044\026\030\027" +
    "\041\030\050\031\040\032\034\033\042\034\005\035\043" +
    "\036\045\037\033\040\036\041\047\042\031\043\027\044" +
    "\026\046\035\047\021\051\032\052\014\053\107\055\020" +
    "\056\016\001\002\000\126\002\ufff8\004\ufff8\005\ufff8\006" +
    "\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8" +
    "\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023" +
    "\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8" +
    "\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040" +
    "\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\046\ufff8\047\ufff8" +
    "\050\ufff8\051\ufff8\052\ufff8\053\ufff8\055\ufff8\056\ufff8\001" +
    "\002\000\110\004\015\005\012\006\006\007\017\010\024" +
    "\013\013\014\111\016\007\020\022\021\004\022\011\023" +
    "\023\024\010\025\044\026\030\027\041\030\050\031\040" +
    "\032\034\033\042\034\005\035\043\036\045\037\033\040" +
    "\036\041\047\042\031\043\027\044\026\046\035\047\021" +
    "\051\032\052\014\055\020\056\016\001\002\000\046\004" +
    "\015\005\012\006\006\007\017\010\024\013\013\016\007" +
    "\020\022\021\004\022\011\023\023\024\010\034\005\044" +
    "\026\047\021\052\014\055\020\056\016\001\002\000\110" +
    "\004\015\005\012\006\006\007\017\010\024\013\013\015" +
    "\113\016\007\020\022\021\004\022\011\023\023\024\010" +
    "\025\044\026\030\027\041\030\050\031\040\032\034\033" +
    "\042\034\005\035\043\036\045\037\033\040\036\041\047" +
    "\042\031\043\027\044\026\046\035\047\021\051\032\052" +
    "\014\055\020\056\016\001\002\000\046\004\015\005\012" +
    "\006\006\007\017\010\024\013\013\016\007\020\022\021" +
    "\004\022\011\023\023\024\010\034\005\044\026\047\021" +
    "\052\014\055\020\056\016\001\002\000\126\002\uffe2\004" +
    "\015\005\012\006\006\007\017\010\uffe2\011\uffe2\012\uffe2" +
    "\013\013\014\uffe2\015\uffe2\016\007\017\uffe2\020\022\021" +
    "\004\022\011\023\023\024\010\025\044\026\030\027\041" +
    "\030\050\031\040\032\034\033\042\034\005\035\043\036" +
    "\045\037\033\040\036\041\047\042\031\043\027\044\026" +
    "\046\035\047\021\050\uffe2\051\032\052\014\053\uffe2\055" +
    "\020\056\016\001\002\000\126\002\ufffb\004\ufffb\005\012" +
    "\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014" +
    "\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb" +
    "\023\ufffb\024\010\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031" +
    "\ufffb\032\ufffb\033\ufffb\034\005\035\ufffb\036\ufffb\037\ufffb" +
    "\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\046\ufffb\047" +
    "\021\050\ufffb\051\ufffb\052\ufffb\053\ufffb\055\ufffb\056\ufffb" +
    "\001\002\000\126\002\ufff6\004\ufff6\005\012\006\ufff6\007" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6" +
    "\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024" +
    "\010\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6" +
    "\033\ufff6\034\005\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041" +
    "\ufff6\042\ufff6\043\ufff6\044\ufff6\046\ufff6\047\021\050\ufff6" +
    "\051\ufff6\052\ufff6\053\ufff6\055\ufff6\056\ufff6\001\002\000" +
    "\110\004\015\005\012\006\006\007\017\010\024\013\013" +
    "\016\007\017\120\020\022\021\004\022\011\023\023\024" +
    "\010\025\044\026\030\027\041\030\050\031\040\032\034" +
    "\033\042\034\005\035\043\036\045\037\033\040\036\041" +
    "\047\042\031\043\027\044\026\046\035\047\021\051\032" +
    "\052\014\055\020\056\016\001\002\000\046\004\015\005" +
    "\012\006\006\007\017\010\024\013\013\016\007\020\022" +
    "\021\004\022\011\023\023\024\010\034\005\044\026\047" +
    "\021\052\014\055\020\056\016\001\002\000\126\002\uffe1" +
    "\004\015\005\012\006\006\007\017\010\uffe1\011\uffe1\012" +
    "\uffe1\013\013\014\uffe1\015\uffe1\016\007\017\uffe1\020\022" +
    "\021\004\022\011\023\023\024\010\025\044\026\030\027" +
    "\041\030\050\031\040\032\034\033\042\034\005\035\043" +
    "\036\045\037\033\040\036\041\047\042\031\043\027\044" +
    "\026\046\035\047\021\050\uffe1\051\032\052\014\053\uffe1" +
    "\055\020\056\016\001\002\000\004\045\123\001\002\000" +
    "\046\004\015\005\012\006\006\007\017\010\024\013\013" +
    "\016\007\020\022\021\004\022\011\023\023\024\010\034" +
    "\005\044\026\047\021\052\014\055\020\056\016\001\002" +
    "\000\126\002\ufffa\004\015\005\012\006\006\007\017\010" +
    "\ufffa\011\ufffa\012\ufffa\013\013\014\ufffa\015\ufffa\016\007" +
    "\017\ufffa\020\022\021\004\022\011\023\023\024\010\025" +
    "\044\026\030\027\041\030\050\031\040\032\034\033\042" +
    "\034\005\035\043\036\045\037\033\040\036\041\047\042" +
    "\031\043\027\044\026\046\035\047\021\050\ufffa\051\032" +
    "\052\014\053\ufffa\055\020\056\016\001\002\000\126\002" +
    "\ufff7\004\ufff7\005\012\006\ufff7\007\ufff7\010\ufff7\011\ufff7" +
    "\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020" +
    "\ufff7\021\ufff7\022\ufff7\023\ufff7\024\010\025\ufff7\026\ufff7" +
    "\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\005\035" +
    "\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7" +
    "\044\ufff7\046\ufff7\047\021\050\ufff7\051\ufff7\052\ufff7\053" +
    "\ufff7\055\ufff7\056\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\123\000\004\002\024\001\001\000\002\001\001\000" +
    "\004\002\124\001\001\000\002\001\001\000\004\002\116" +
    "\001\001\000\004\002\115\001\001\000\002\001\001\000" +
    "\004\002\114\001\001\000\004\002\107\001\001\000\004" +
    "\002\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\045\001\001\000\002\001\001\000\004\002\067" +
    "\001\001\000\004\002\066\001\001\000\004\002\065\001" +
    "\001\000\004\002\064\001\001\000\004\002\063\001\001" +
    "\000\004\002\062\001\001\000\004\002\061\001\001\000" +
    "\004\002\060\001\001\000\002\001\001\000\004\002\057" +
    "\001\001\000\004\002\056\001\001\000\004\002\055\001" +
    "\001\000\004\002\054\001\001\000\004\002\053\001\001" +
    "\000\004\002\052\001\001\000\004\002\045\001\001\000" +
    "\004\002\051\001\001\000\004\002\050\001\001\000\004" +
    "\002\045\001\001\000\004\002\045\001\001\000\004\002" +
    "\045\001\001\000\004\002\045\001\001\000\004\002\045" +
    "\001\001\000\004\002\045\001\001\000\004\002\045\001" +
    "\001\000\004\002\045\001\001\000\004\002\045\001\001" +
    "\000\004\002\045\001\001\000\004\002\045\001\001\000" +
    "\004\002\045\001\001\000\004\002\045\001\001\000\004" +
    "\002\045\001\001\000\004\002\045\001\001\000\004\002" +
    "\045\001\001\000\002\001\001\000\004\002\072\001\001" +
    "\000\004\002\045\001\001\000\004\002\074\001\001\000" +
    "\004\002\045\001\001\000\002\001\001\000\004\002\045" +
    "\001\001\000\002\001\001\000\004\002\101\001\001\000" +
    "\004\002\045\001\001\000\004\002\045\001\001\000\002" +
    "\001\001\000\004\002\105\001\001\000\004\002\045\001" +
    "\001\000\002\001\001\000\004\002\045\001\001\000\004" +
    "\002\111\001\001\000\004\002\045\001\001\000\004\002" +
    "\113\001\001\000\004\002\045\001\001\000\004\002\045" +
    "\001\001\000\004\002\045\001\001\000\004\002\045\001" +
    "\001\000\004\002\120\001\001\000\004\002\045\001\001" +
    "\000\002\001\001\000\004\002\123\001\001\000\004\002" +
    "\045\001\001\000\004\002\045\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Parser(InputStream in) {
        this(new Lexer(in));
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


    static Symbol symbol(String s) {
        return Symbol.symbol(s);
    }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // e ::= LPAREN e RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Group(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // e ::= UNIT 
            {
              Expr RESULT =null;
		 RESULT = new Unit(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // e ::= CONTINUE 
            {
              Expr RESULT =null;
		 RESULT = new Continue(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // e ::= BREAK 
            {
              Expr RESULT =null;
		 RESULT = new Break(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // e ::= WHILE e DO e 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Loop(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // e ::= IF e THEN e ELSE e 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Cond(e1, e2, e3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // e ::= LET ID EQ e IN e END 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Let(symbol(x), e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // e ::= e e 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new App(l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // e ::= e SEMI e 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Seq(l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // e ::= e ASSIGN e 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Assign(l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // e ::= e CONS e 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Cons(l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // e ::= e ORELSE e 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OrElse(l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // e ::= e ANDALSO e 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AndAlso(l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // e ::= e GE e 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GreaterEq(l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // e ::= e GT e 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Greater(l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // e ::= e LE e 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LessEq(l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // e ::= e LT e 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Less(l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // e ::= e NE e 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Neq(l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // e ::= e EQ e 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Eq(l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // e ::= e MOD e 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Mod(l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // e ::= e DIV e 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Div(l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // e ::= e MUL e 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Mul(l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // e ::= e SUB e 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Sub(l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // e ::= e ADD e 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Add(l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // e ::= DEREF e 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Deref(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // e ::= NOT e 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Not(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // e ::= NEG e 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Neg(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // e ::= LPAREN e COMMA e RPAREN 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Pair(l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // e ::= REC ID ARROW e 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Rec(symbol(x), e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // e ::= FN ID ARROW e 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Fn(symbol(x), e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // e ::= REF e 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Ref(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // e ::= NIL 
            {
              Expr RESULT =null;
		 RESULT = new Nil(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // e ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT = new BooleanLiteral(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // e ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT = new BooleanLiteral(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // e ::= ID 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Name(symbol(x)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // e ::= NUM 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerLiteral(n.intValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= e EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr start_val = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

